;; The first three lines of this file were inserted by DrScheme. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(planet plai/plai:1:3/lang/reader)
(define-type CFAE/L
[num (n number?)]
[add (lhs CFAE/L?) (rhs CFAE/L?)]
[id (name symbol?)]
[fun (param symbol?) (body CFAE/L?)]
[app (fun-expr CFAE/L?) (arg-expr CFAE/L?)])

(define-type CFAE/L-Value
[numV (n number?)]
[closureV (param symbol?)
(body CFAE/L?)
(env Env?)]
[exprV (expr CFAE/L?)
(env Env?)])
(define-type Env
[mtSub]
[aSub (name symbol?) (value CFAE/L-Value?) (env Env?)])

;; num+ : CFAE/L-Value CFAE/L-Value −! numV
(define (num+ n1 n2)
(numV (+ (numV-n (strict n1)) (numV-n (strict n2)))))
;; num-zero? : CFAE/L-Value !boolean

(define (num-zero? n)
(zero? (numV-n (strict n))))

;; strict : CFAE/L-Value ! CFAE/L-Value [excluding exprV]

(define (strict e)
(type-case CFAE/L-Value e
[exprV (expr env)
(local ([define the-value (strict (interp expr env))])
(begin
(printf ”Forcing exprV to  ̃a ̃n” the-value)
the-value))]
[else e]))


;; interp : CFAE/L Env !CFAE/L-Value
(define (interp expr env)
(type-case CFAE/L expr
[num (n) (numV n)]
[add (l r) (num+ (interp l env) (interp r env))]
[id (v) (lookup v env)]
[fun (bound-id bound-body)
(closureV bound-id bound-body env)]
[app (fun-expr arg-expr)
(local ([define fun-val (strict (interp fun-expr env))]
[define arg-val (exprV arg-expr env)])
(interp (closureV-body fun-val)
(aSub (closureV-param fun-val)
arg-val
(closureV-env fun-val))))]))



(define-type CFAE/L-Value
[numV (n number?)]
[closureV (param symbol?)
(body CFAE/L?)
(env Env?)]
[exprV (expr CFAE/L?)
(env Env?)
(cache boxed-boolean/CFAE/L-Value?)])
(define (boxed-boolean/CFAE/L-Value? v)
(and (box? v)
(or (boolean? (unbox v))
(numV? (unbox v))
(closureV? (unbox v)))))
;; strict : CFAE/L-Value !CFAE/L-Value [excluding exprV]
(define (strict e)
(type-case CFAE/L-Value e
[exprV (expr env cache)
(if (boolean? (unbox cache))
(local [(define the-value (strict (interp expr env)))]
(begin
(printf ”Forcing exprV ˜a to ˜a˜n” expr the-value)
(set-box! cache the-value)
the-value))
(begin
(printf ”Using cached value˜n”)
(unbox cache)))]
[else e]))

;; interp : CFAE/L Env !CFAE/L-Value
(define (interp expr env)
(type-case CFAE/L expr
[num (n) (numV n)]
[add (l r) (num+ (interp l env) (interp r env))]
[id (v) (lookup v env)]
[fun (bound-id bound-body)
(closureV bound-id bound-body env)]
[app (fun-expr arg-expr)
(local ([define fun-val (strict (interp fun-expr env))]
[define arg-val (exprV arg-expr env (box false))])
(interp (closureV-body fun-val)
(aSub (closureV-param fun-val)
arg-val
(closureV-env fun-val))))]))